#!/usr/bin/ruby -w

require "pathname.rb"
$LOAD_PATH.unshift(Pathname.new(__FILE__).realpath().dirname().dirname().dirname() + "libs" + "ruby")

require "Package.rb"
require "Shell.rb"
require "UserGroupInfo.rb"

require 'etc'
require 'fileutils'

module InstallSimh
  
  LIBPCAP =               "libpcap-1.1.1"
  SIMH_ACCOUNT =          "simh"

  def self.install(options)
    apt_options = []
    apt_options << :dry_run if options.dry_run?()

    # Make sure that the user has enough privs to perform the installation
    # Don't bother with this check if --dry-run was specified
    unless privs_available?(options)
      exit(1)
    end unless options.dry_run?()

    apt_packages = []
    apt_packages << "bison"
    apt_packages << "bridge-utils"
    apt_packages << "flex"
    apt_packages << "libbison-dev"
    apt_packages << "libpcap-dev"
    apt_packages << "libsdl1.2-dev"
    apt_packages << "m4"
    apt_packages << "uml-utilities"
    apt_packages << "unzip"

    # Install the necessary packages via apt
    message(options, "Installing apt packages")
    Package::install_apt_packages(apt_packages, apt_options)

    # Make sure the simh user exists
    self.create_account_for_simh(options)
  end
  
  def self.as_user(uid, gid)
    Process.fork() {
      Process.gid = gid
      Process.egid = gid
      Process.uid = uid
      Process.euid = uid
      yield 
    }
  end

  def self.configure(options)
    user_name = SIMH_ACCOUNT
    u = Etc.getpwnam(user_name)
    req_uid = u.uid()
    req_gid = u.gid()
    g = Etc.getgrgid(req_gid)
    req_grpname = g.name()

    uid = Process.uid()
    message(options, "Running with uid: #{uid}, required: #{req_uid}")

    if req_uid != uid
      # Had to adjust sudoers to make the simh account passwordless ...
      # This has to be done while still (hopefully) running with privs
      File.open("/etc/sudoers.d/90-simh", "w") {
        |file|
        file.write("\n# Do not edit this file - it is needed for simh operation\n\n")
        file.write("#{SIMH_ACCOUNT} ALL=(ALL) NOPASSWD: ALL\n\n")
      }
      puts("About to fork process.")
      self.as_user(req_uid, req_gid) {
        self.configure(options)
      }
      return
    end
    shell_options = []
    shell_options << :dry_run if options.dry_run?()

    puts("In configue as uid #{Process.uid} euid #{Process.euid} - doing REAL WORK")

    # Rest of script runs as simh

    # Make sure that ~/simh exists
    home = Etc.getpwnam(user_name).dir()
    simh_dir = home + "/simh/"
    FileUtils::mkdir_p(simh_dir)

    # Build and install libpcap
    Shell::execute_shell_commands("cd #{simh_dir}; wget -nv http://www.tcpdump.org/release/#{LIBPCAP}.tar.gz", shell_options)
    Shell::execute_shell_commands("cd #{simh_dir}; tar vxf #{LIBPCAP}.tar.gz", shell_options)
    Shell::execute_shell_commands("cd #{simh_dir}#{LIBPCAP}; ./configure", shell_options)
    Shell::execute_shell_commands("cd #{simh_dir}#{LIBPCAP}; make", shell_options)
    Shell::execute_shell_commands("cd #{simh_dir}#{LIBPCAP}; sudo make install", shell_options)

    # Build simh itself
    Shell::execute_shell_commands("cd #{simh_dir}; wget -nv https://github.com/simh/simh/archive/master.zip", shell_options)
    Shell::execute_shell_commands("cd #{simh_dir}; unzip master.zip", shell_options)
    Shell::execute_shell_commands("cd #{simh_dir}; make -C simh-master", shell_options)
  end

  def self.message(options, message)
    puts("#{File.basename(__FILE__)}: #{message}") if options.verbose?()
  end

  def self.privs_available?(options)
    message(options, "Checking for privileges (root or sudo)")
    # TODO - currently just hopes for the best
    return true
  end

  # Creates simh user if necessary.
  # Returns the user's uid
  def self.create_account_for_simh(options)
    shell_options = []
    shell_options << :dry_run if options.dry_run?()

    message(options, "Creating simh user account if required")
    user_name = SIMH_ACCOUNT
    u = UserGroupInfo::get_user(user_name)
    group_name = u.group_name()
    g = UserGroupInfo::get_group(group_name)
    user_id = u.uid()
    group_id = g.gid()

    u = nil
    begin
      u = Etc.getpwnam(user_name)
    rescue ArgumentError
    end

    # If the user already exists, return its uid.
    unless u.nil?()
      message(options, "#{SIMH_ACCOUNT} user already exists with uid #{u.uid}")
      return u.uid
    end

    # Check for the group and create it if needed
    g = nil
    begin
      g = Etc.getgrnam(group_name)
    rescue ArgumentError
      puts("group does not exist")
    end
    
    if g.nil?()
      message(options, "Creating simh account group #{group_name} with gid #{group_id}.")
      Shell::execute_shell_commands("addgroup --gid #{group_id} #{group_name}", shell_options)
      # TODO what to do if this fails?
    else
      message(options, "simh group already exists with gid #{g.gid}.")
    end

    # Create the user
    message(options, "Creating simh user #{user_name} with uid #{user_id}.")
    Shell::execute_shell_commands("useradd -m -g #{group_name} -u #{user_id} -d /home/#{user_name} -c 'SIMH user' #{user_name}", shell_options)

    # Add simh to sudo
    message(options, "Adding simh user #{user_name} to sudo group.")
    Shell::execute_shell_commands("adduser #{user_name} sudo", shell_options)

    return user_id
  end

end # end of InstallSimh

# Test cases
if __FILE__ == $0
  require "Installer.rb"
  ARGV.clear()
  ARGV << "--dry-run"
  ARGV << "--verbose"
  options = Installer::parse_options()
  puts("# Install simh (dry run, verbose)")
  InstallSimh::install(options)
  puts("# Configure simh (dry run, verbose)")
  InstallSimh::configure(options)
end
